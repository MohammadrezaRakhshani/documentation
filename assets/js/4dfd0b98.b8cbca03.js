"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8620],{1906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"Plugins/Proccessors/Concept Mapper","title":"Concept Mapper","description":"Introduction:","source":"@site/docs/Plugins/Proccessors/Concept Mapper.md","sourceDirName":"Plugins/Proccessors","slug":"/Plugins/Proccessors/Concept Mapper","permalink":"/documentation/docs/Plugins/Proccessors/Concept Mapper","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CSV Operations","permalink":"/documentation/docs/Plugins/Proccessors/CSV Operations"},"next":{"title":"Conditions","permalink":"/documentation/docs/Plugins/Proccessors/Conditions"}}');var i=t(4848),s=t(8453);const r={},a=void 0,c={},u=[];function p(e){const n={li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Introduction:"}),"\nThis plugin is a simple mapping plugin which uses concept map data in Terminology section of Wehub."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Actions:"}),"\nFor now the only action is ",(0,i.jsx)(n.strong,{children:"map field"})," which is getting a value in the input and provide mapped value based on concept map data in the output(default action)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configurations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"concept_map_id: the ID of the chosen concept map data."}),"\n",(0,i.jsx)(n.li,{children:"input_name: since this plugin doesn't need any schema to work, and it only needs an input name to appear in designer this is the input field name."}),"\n",(0,i.jsx)(n.li,{children:"input_type: type of input value.\navailable types: 1.Number 2.String 3.Boolean"}),"\n",(0,i.jsx)(n.li,{children:"output_name: same as input name but for the output."}),"\n",(0,i.jsx)(n.li,{children:"output_type: type of output value\navailable types: 1.Number 2.String 3.Boolean"}),"\n",(0,i.jsxs)(n.li,{children:['map_direction: when the user creates a concept map, this concept map has a default direction which is mapping the keys to values, but we have the feature of mapping the values to keys, so the user must specify whether he/she wants to use it as it is(Default direction) or in reverse(Reversed direction).\nImagine you have the following concept map {"red": 1, "blue": 2} if the map_direction value is set to DEFAULT you have to provide blue or red in the input and you\'ll get 1 or 2 in the output. but if it\'s REVERSED you have to provide 1 or 2 in the input and get red or blue in the output.\navailable options: 1.',(0,i.jsx)(n.strong,{children:"DEFAULT"})," 2.",(0,i.jsx)(n.strong,{children:"REVERSED"}),"."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);